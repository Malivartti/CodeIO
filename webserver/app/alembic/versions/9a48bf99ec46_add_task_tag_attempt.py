"""Add Task, Tag, Attempt

Revision ID: 9a48bf99ec46
Revises: 5ba2cebfd540
Create Date: 2025-06-01 14:29:40.812194

"""
from typing import Sequence, Union

from alembic import op
import sqlmodel
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '9a48bf99ec46'
down_revision: Union[str, None] = '5ba2cebfd540'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tag',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('task',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=False),
    sa.Column('difficulty', sa.Enum('easy', 'medium', 'hard', name='difficulty_enum'), nullable=True),
    sa.Column('time_limit_seconds', sa.Integer(), nullable=False),
    sa.Column('memory_limit_megabytes', sa.Integer(), nullable=False),
    sa.Column('tests', sa.JSON(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('correct_attempts', sa.Integer(), nullable=False),
    sa.Column('total_attempts', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), server_onupdate=sa.text("CURRENT_TIMESTAMP"), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('title')
    )
    op.create_table('attempt',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('programming_language', sa.Enum('python', 'javaScript', 'cpp', 'go', name='programming_language_enum'), nullable=True),
    sa.Column('source_code', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('running', 'solved', 'failed', 'error', name='attempt_status_enum'), nullable=True),
    sa.Column('time_used', sa.Integer(), nullable=True),
    sa.Column('memory_used', sa.Integer(), nullable=True),
    sa.Column('error_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('failed_test_number', sa.Integer(), nullable=True),
    sa.Column('source_code_output', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expected_output', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tasktaglink',
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.PrimaryKeyConstraint('task_id', 'tag_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tasktaglink')
    op.drop_table('attempt')
    op.drop_table('task')
    op.drop_table('tag')
    # ### end Alembic commands ###
    sa.Enum('easy', 'medium', 'hard', name='difficulty_enum').drop(op.get_bind())
    sa.Enum('python', 'javaScript', 'cpp', 'go', name='programming_language_enum').drop(op.get_bind())
    sa.Enum('running', 'solved', 'failed', 'error', name='attempt_status_enum').drop(op.get_bind())
